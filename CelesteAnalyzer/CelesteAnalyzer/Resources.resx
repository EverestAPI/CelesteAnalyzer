<?xml version="1.0" encoding="utf-8"?>

<root>
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:element name="root" msdata:IsDataSet="true">
            
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>1.3</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    
    <data name="CL0001Title" xml:space="preserve">
        <value>Lambda passed to ILCursor.EmitDelegate</value>
    </data>
    <data name="CL0001Description" xml:space="preserve">
        <value>Avoid passing lambdas to ILCursor.EmitDelegate.</value>
    </data>
    <data name="CL0001MessageFormat" xml:space="preserve">
        <value>Avoid passing lambdas to ILCursor.EmitDelegate, as it emits inefficient code. Pass a reference (method group) to a static method instead.</value>
    </data>
    
    <data name="CL0002Title" xml:space="preserve">
        <value>Instance method passed to EmitDelegate</value>
    </data>
    <data name="CL0002Description" xml:space="preserve">
        <value>Avoid passing instance methods to ILCursor.EmitDelegate.</value>
    </data>
    <data name="CL0002MessageFormat" xml:space="preserve">
        <value>Avoid passing instance methods to ILCursor.EmitDelegate, as it can result in capturing an instance of your class in unexpected ways</value>
    </data>
    
    <data name="CL0003Title" xml:space="preserve">
        <value>Orig not called in hook</value>
    </data>
    <data name="CL0003Description" xml:space="preserve">
        <value>Call 'orig' in hooks.</value>
    </data>
    <data name="CL0003MessageFormat" xml:space="preserve">
        <value>At least one code path should call 'orig' in hooks, to allow other hooks to run properly</value>
    </data>

    <data name="CL0004Title" xml:space="preserve">
        <value>Non-static Hook</value>
    </data>
    <data name="CL0004Description" xml:space="preserve">
        <value>Hooks should be static.</value>
    </data>
    <data name="CL0004MessageFormat" xml:space="preserve">
        <value>Hooks should be static, otherwise it can result in capturing an instance of your class in unexpected ways</value>
    </data>
    <data name="CL0004CodeFixTitle" xml:space="preserve">
        <value>Make method static</value>
    </data>

    <data name="CL0005Title" xml:space="preserve">
        <value>ILCursor.Remove or RemoveRange used</value>
    </data>
    <data name="CL0005Description" xml:space="preserve">
        <value>ILCursor.Remove or RemoveRange should never be used.</value>
    </data>
    <data name="CL0005MessageFormat" xml:space="preserve">
        <value>Don't call ILCursor.Remove or RemoveRange, as it can break other IL hooks which search for the removed instructions</value>
    </data>

    <data name="CL0006Title" xml:space="preserve">
        <value>Multiple predicates to ILCursor.(Try)Goto*</value>
    </data>
    <data name="CL0006Description" xml:space="preserve">
        <value>Avoid passing multiple predicates to ILCursor.(Try)Goto*.</value>
    </data>
    <data name="CL0006MessageFormat" xml:space="preserve">
        <value>Avoid passing several predicates to ILCursor.(Try)Goto* methods, as other hooks might inject instructions between the target instructions. If possible, split them into separate calls instead.</value>
    </data>

    <data name="CL0007Title" xml:space="preserve">
        <value>No valid ctor for CustomEntity</value>
    </data>
    <data name="CL0007Description" xml:space="preserve">
        <value>No valid ctor for Entity marked with the CustomEntity attribute.</value>
    </data>
    <data name="CL0007MessageFormat" xml:space="preserve">
        <value>Entities marked with the CustomEntity attribute must have one of the following constructors: 
            {0}(EntityData, Vector2 offset, EntityID),
            {0}(EntityData, Vector2 offset),
            {0}(Vector2 offset),
            {0}()</value>
    </data>

    <data name="CL0008Title" xml:space="preserve">
        <value>Class marked by CustomEntity doesn't extend Entity</value>
    </data>
    <data name="CL0008Description" xml:space="preserve">
        <value>Class marked by CustomEntity doesn't extend Entity.</value>
    </data>
    <data name="CL0008MessageFormat" xml:space="preserve">
        <value>Classes marked with the CustomEntity attribute must extend from Entity</value>
    </data>

    <data name="CL0009Title" xml:space="preserve">
        <value>CustomEntity generator method missing</value>
    </data>
    <data name="CL0009Description" xml:space="preserve">
        <value>CustomEntity Generator method missing.</value>
    </data>
    <data name="CL0009MessageFormat" xml:space="preserve">
        <value>The CustomEntity attribute specifies a generator method '{0}', but it is missing from the class</value>
    </data>

    <data name="CL0010Title" xml:space="preserve">
        <value>CustomEntity generator method parameters invalid</value>
    </data>
    <data name="CL0010Description" xml:space="preserve">
        <value>CustomEntity generator method has invalid parameters.</value>
    </data>
    <data name="CL0010MessageFormat" xml:space="preserve">
        <value>Invalid parameters for CustomEntity generator method. They must be one of the following:
            {0}(Level, LevelData, EntityData, Vector2 offset, EntityID),
            {0}(EntityData, Vector2 offset, EntityID),
            {0}(EntityData, Vector2 offset),
            {0}(Vector2 offset),
            {0}()</value>
    </data>

    <data name="CL0011Title" xml:space="preserve">
        <value>CustomEntity generator method invalid</value>
    </data>
    <data name="CL0011Description" xml:space="preserve">
        <value>CustomEntity generator method is invalid.</value>
    </data>
    <data name="CL0011MessageFormat" xml:space="preserve">
        <value>CustomEntity generator methods must be static, and return Entity or a type extending Entity</value>
    </data>

    <data name="CL0012Title" xml:space="preserve">
        <value>CustomEntity with no IDs</value>
    </data>
    <data name="CL0012Description" xml:space="preserve">
        <value>CustomEntity with no IDs.</value>
    </data>
    <data name="CL0012MessageFormat" xml:space="preserve">
        <value>CustomEntity attributes need at least one IDs passed as an argument to function properly</value>
    </data>

    <data name="CL0013Title" xml:space="preserve">
        <value>Entity.Scene accessed in ctor</value>
    </data>
    <data name="CL0013Description" xml:space="preserve">
        <value>Entity.Scene accessed in ctor.</value>
    </data>
    <data name="CL0013MessageFormat" xml:space="preserve">
        <value>Entity.Scene is always null in the constructor. Move any code that requires the Scene to Added (called before all entities are added to the scene) or Awake (called after all entities are added)</value>
    </data>

    <data name="CL0014Title" xml:space="preserve">
        <value>Use Tracker if possible</value>
    </data>
    <data name="CL0014Description" xml:space="preserve">
        <value>Use the Tracker if possible.</value>
    </data>
    <data name="CL0014MessageFormat" xml:space="preserve">
        <value>Instead of EntityList.Find(All), use Scene.Tracker with types marked with the [Tracked] attribute for much better performance. EntityList.Find(All) loops through all entities in the scene, the Tracker is a Dictionary lookup.</value>
    </data>

    <data name="CL0015Title" xml:space="preserve">
        <value>Tracker used on untracked type</value>
    </data>
    <data name="CL0015Description" xml:space="preserve">
        <value>Tracker used on untracked type.</value>
    </data>
    <data name="CL0015MessageFormat" xml:space="preserve">
        <value>Trying to call Tracker methods on types not marked with [Tracked] or [TrackedAs] will fail at runtime. Add the [Tracked] or [TrackedAs] attribute to {0} if possible.</value>
    </data>

    <data name="CL0016Title" xml:space="preserve">
        <value>Invalid TrackedAs usage</value>
    </data>
    <data name="CL0016Description" xml:space="preserve">
        <value>Invalid TrackedAs usage.</value>
    </data>
    <data name="CL0016MessageFormat" xml:space="preserve">
        <value>Using [TrackedAs(typeof({0}))] when your class does not extend {0} can fail at runtime, due to code outside your control expecting Tracker methods to only return types extending {0}.</value>
    </data>

    <data name="CL0017Title" xml:space="preserve">
        <value>Avoid yield return orig(...)</value>
    </data>
    <data name="CL0017Description" xml:space="preserve">
        <value>Avoid yield return orig(...).</value>
    </data>
    <data name="CL0017MessageFormat" xml:space="preserve">
        <value>Avoid using `yield return orig(...)`, as it introduces a 1-frame delay. Use `yield return new SwapImmediately(orig(...))`, or, if this method is used by a StateMachine, enumerate the enumerator manually and yield return all of its elements in a loop.</value>
    </data>
</root>